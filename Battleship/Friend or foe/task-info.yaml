type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Asker.java
  visible: true
  text: |
    package battleship;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.Scanner;

    public final class Asker {
        protected static Scanner scanner = new Scanner(System.in);

        static String userInput(String question) {

            System.out.println(question);

            return scanner.nextLine();
        }

    }
  learner_created: true
- name: src/battleship/Ships.java
  visible: true
  text: |
    package battleship;

    public enum Ships {
        AircraftCarrier(5),
        Battleship(4),
        Submarine(3),
        Cruiser(3),
        Destroyer(2);


        private final int shipSize;

        Ships(int shipSize) {
            this.shipSize = shipSize;
        }

        public int getShipSize() {
            return shipSize;
        }
    }
  learner_created: true
- name: src/battleship/GameController.java
  visible: true
  text: |
    package battleship;

    import java.util.Arrays;
    import java.util.Scanner;

    public class GameController {
        private static Battleship[] battleships = new Battleship[5];
        private static Table table = new Table(10, 10);
        private static String fullQuestion = "";
        private static String userInput = "";
        private static String validateStr = " ";
        private static Validating validating = new Validating();

        private static int index = 0;


        public static void start() {

            String templateQuestion = "Enter the coordinates of the ";
            Battleship battleship;

            int i = 0;
            for (Ships ship : Ships.values()) {
                table.showTable();
                System.out.println();
                do {
                    fullQuestion = templateQuestion + (ship.name().equals("AircraftCarrier") ? "Aircraft Carrier" : ship) + " (" + ship.getShipSize() + " cells):";
                    userInput = Asker.userInput(fullQuestion); //ha false újrakérdez
                    System.out.println();
                    battleship = new Battleship(ship, 'X');
                    validating = new Validating(userInput, battleship, table);
                    validateStr = validating.validateAll();
                    if (!validateStr.equals("OK")) System.out.println(validateStr + "\n");
                    if (validateStr.equals("OK")) battleships[i++] = battleship;

                } while (!validateStr.equals("OK"));

                table.addBattleShip(validating.getInput(), battleship);

            }
            table.showTable();
            System.out.println();
            startGame();

        }

        private static boolean allShipDestroyed() {

            boolean isAircraftDestroyed = battleships[0] == null ? true : false;
            boolean isBattleshipDestroyed = battleships[1] == null ? true : false;
            boolean isSubmarineDestroyed = battleships[2] == null ? true : false;
            boolean isCruiserDestroyed = battleships[3] == null ? true : false;
            boolean isDestroyerDestroyed = battleships[4] == null ? true : false;
            ;

            return isAircraftDestroyed &&
                    isBattleshipDestroyed &&
                    isSubmarineDestroyed &&
                    isCruiserDestroyed &&
                    isDestroyerDestroyed;

        }

        private static void startGame() {

            fullQuestion = "Take a shot!\n";
            System.out.println("The game starts!\n");
            table.hideTable();
            String responseStr = "";
            do {
                userInput = Asker.userInput(fullQuestion);
                validateStr = validating.shotInputCheck(userInput);

                if (validateStr.equals("OK")) {
                    System.out.println();
                    String inp = table.changeTableMissOrHit(userInput);
                    if (inp.equals("MISS")) {
                        System.out.println();
                        table.hideTable();
                        responseStr = "You missed.";

                    } else if (inp.equals("HIT")) {
                        table.hideTable();
                        responseStr = "You hit a ship!";

                        if (table.getBattleshipByCoord(battleships, userInput) != null && !inp.equals("FAKEHIT")) {
                            table.getBattleshipByCoord(battleships, userInput).setAttacked();
                            System.out.println();
                        }

                    } else if (inp.equals("FAKEHIT")) {
                        table.hideTable();
                        responseStr = "You hit a ship!";
                    }
                    if (table.getBattleshipByCoord(battleships, userInput) != null && table.getBattleshipByCoord(battleships, userInput).isDestroyed()) {
                        fullQuestion = "You sank a ship! Specify a new target";
                        battleships[findIndexOfBattleship(table.getBattleshipByCoord(battleships, userInput))] = null;

                    } else {
                        fullQuestion = responseStr + " Try again:";
                    }

                    System.out.println();

                } else {
                    System.out.println(validateStr);
                }

            } while (!allShipDestroyed());

            System.out.println("You sank the last ship. You won. Congratulations!");
        }

        private static int findIndexOfBattleship(Battleship battleship) {
            int index = 0;

            for (int i = 0; i < battleships.length; i++) {
                if (battleship.equals(battleships[i])) index = i;
            }

            return index;
        }
    }
  learner_created: true
- name: src/battleship/Table.java
  visible: true
  text: |
    package battleship;

    import java.util.Arrays;

    public class Table {


        public String[][] getTable() {
            return table;
        }

        private String[][] table;
        private TableSymbols denote; // '~','M','X'..
        boolean row = false;
        boolean column = false;

        public Table(int sizeX, int sizeY) {
            this.table = new String[sizeX][sizeY];
            initTable();
        }

        public void showTable() {
            header(this.table[0].length);
            body();
        }

        private void header(int number) {
            System.out.print("  ");
            for (int i = 1; i <= number; i++) {
                System.out.print(" " + i);
            }
            System.out.println();
        }

        private void body() {
            for (int i = 0; i < this.table.length; i++) {
                System.out.print(" " + ((char) (i + 65)));
                for (int j = 0; j < table[0].length; j++) {
                    System.out.print(" " + table[i][j]);
                }
                System.out.println();
            }
        }

        private void initTable() {
            for (int i = 0; i < table.length; i++) {
                for (int j = 0; j < table[0].length; j++) {
                    table[i][j] = TableSymbols.UNTOUCHED.getSymbol();
                }
            }
        }

        protected void addBattleShip(String coordinate, Battleship battleship) {
            // F3 F7 koordináta leképzése
            // sor - egyezik az 1.char
            // oszlop - egyezik a 2.char
            //amelyik nem egyezik az meg növekszik
            // 1.char-t átalakítani tömbös indexé, int rowNumber = (char) 'A'-65;
            // 2.dim tömbbe eltárolni a hajó koordinátáit (Battleship-ben is van ilyen, setCoordinate?)

            String[] coordinates = coordinate.split(" ");
            int rowSecNum = Integer.parseInt(coordinates[0].substring(1, 2));

            int range = coordinates[0].length() == 2 ? 2 : 3; //because of F9 F10 +char
            int rowFirstNum = Integer.parseInt(coordinates[0].substring(1, range));

            row = coordinates[0].substring(0, 1).equals(coordinates[1].substring(0, 1));
            column = coordinates[0].substring(1, 2).equals(coordinates[1].substring(1, 2));
            int rowNumber = 0;
            int columnNumber = 0;
            rowNumber = getArrayIndexFromChar(coordinates[0].charAt(0));
            columnNumber = getArrayIndexFromChar(coordinates[0].charAt(0));

            int[][] shipCoordinate = new int[battleship.getSize()][2];
            int index = rowSecNum;
            if (row) {

                for (int i = 0; i < shipCoordinate.length; i++) {
                    shipCoordinate[i][1] = index++;
                    shipCoordinate[i][0] = rowNumber;

                }

            } else if (column) {
                for (int i = 0; i < shipCoordinate.length; i++) {
                    shipCoordinate[i][0] = rowNumber++;
                    shipCoordinate[i][1] = rowFirstNum;

                }
            }

            //save and update table array
            battleship.setCoordinates(shipCoordinate);
            modifyTableCoordinate(battleship);

        }

        private int getArrayIndexFromChar(char character) {
            return character - 65;
        }

        protected void modifyTableCoordinate(Battleship battleship) {
            int[][] shipCoordinate = battleship.getCoordinates();

            for (int i = 0; i < shipCoordinate.length; i++) {
                for (int j = 0; j < shipCoordinate.length; j++) {
                    table[shipCoordinate[i][0]][shipCoordinate[i][1] - 1] = "O";
                }
            }
        }

        protected String getProperOrderInput(String input) {

            String[] coord = input.split(" ");
            String startCoord = coord[0];
            String endCoord = coord[1];

            String orderedInput = "";
            int startCoorNum = Integer.parseInt(startCoord.substring(1, 2));
            int endCoorNum = Integer.parseInt(endCoord.substring(1, 2));

            int startColumnNum = getArrayIndexFromChar(startCoord.charAt(0));
            int endColumnNum = getArrayIndexFromChar(endCoord.charAt(0));

            if (row && (endCoorNum < startCoorNum)) {
                orderedInput = endCoord + " " + startCoord;
            } else if (column && (endColumnNum < startColumnNum)) {
                orderedInput = endCoord + " " + startCoord;
            } else {
                orderedInput = input;
            }
            return orderedInput;
        }

        public String changeTableMissOrHit(String input) {


            int range = input.length() == 2 ? 2 : 3; //because of F9 F10 +char
            int rowNumber = getArrayIndexFromChar(input.charAt(0));
            int columnNum = Integer.parseInt(input.substring(1, range)) - 1;

            //because of task description, previous hit or miss
            boolean hit = table[rowNumber][columnNum].equals("O");
            boolean miss = table[rowNumber][columnNum].equals("~") || table[rowNumber][columnNum].equals("M");
            boolean fakeHit = table[rowNumber][columnNum].equals("X");

            String result = "";
            if (hit) {
                table[rowNumber][columnNum] = TableSymbols.HIT.getSymbol();
                result = "HIT";
            } else if (miss) {
                table[rowNumber][columnNum] = TableSymbols.MISS.getSymbol();
                result = "MISS";
            } else if (fakeHit) {
                table[rowNumber][columnNum] = TableSymbols.HIT.getSymbol();
                result = "FAKEHIT";
            }
            return result;

        }

        protected void hideTable() {
            header(this.table[0].length);
            for (int i = 0; i < this.table.length; i++) {
                System.out.print(" " + ((char) (i + 65)));
                for (int j = 0; j < table[0].length; j++) {
                    if (table[i][j].equals("O")) {
                        System.out.print(" " + TableSymbols.UNTOUCHED.getSymbol());

                    } else {
                        System.out.print(" " + table[i][j]);
                    }
                }
                System.out.println();
            }
        }

        protected Battleship getBattleshipByCoord(Battleship[] battleships, String coord) {

            int range = coord.length() == 2 ? 2 : 3; //because of F9 F10 +char
            int rowNumber = getArrayIndexFromChar(coord.charAt(0));
            int columnNum = Integer.parseInt(coord.substring(1, range));
            for (Battleship battleship : battleships) {
                if (battleship == null) continue;
                for (int[] item : battleship.getCoordinates()) {
                    if (item[0] == rowNumber && item[1] == columnNum) {
                        return battleship;
                    }
                }
            }
            return null;
        }
    }
  learner_created: true
- name: src/battleship/Validating.java
  visible: true
  text: |
    package battleship;

    public class Validating {

        public String getInput() {
            return input;
        }

        private String input;
        private Battleship battleship;
        private Table table;
        boolean row = false;
        boolean column = false;

        public Validating(String input, Battleship battleship, Table table) {
            this.battleship = battleship;
            this.table = table;
            this.input = input;
            setProperOrderInput();
        }

        public Validating() {

        }

        public String getValidateStr() {
            return validateStr;
        }

        String validateStr = "OK";

        private void sizeCheck() {
            if (lengthOfGivenCoordinate() != battleship.getSize())
                validateStr = "Error! Wrong length of the " + battleship.getName() + "! Try again:";
        }

        private void rowColumnCheck() {
            if (!row && !column) validateStr = "Error! Wrong ship location! Try again:";
        }

        private void arrangeCheck() {
            if (isShipAround())
                validateStr = "Error! You placed it too close to another one. Try again:";

        }

        private void inputCheck() {
            String regExp1 = "([A-J]([1-9)]|10))\s([A-J]([1-9]|10))";

            if (!(input.matches(regExp1))) validateStr = "Error! You entered the wrong coordinates! Try again:";

        }

        protected String shotInputCheck(String shotInput) {
            String regExp1 = "([A-J]([1-9)]|10))";
            if (!(shotInput.matches(regExp1))) {
                validateStr = "Error! You entered the wrong coordinates! Try again:";
            } else {
                validateStr = "OK";
            }
            return validateStr;

        }

        private void setProperOrderInput() {
            String[] coord = input.split(" ");
            String startCoord = coord[0];
            String endCoord = coord[1];

            int rangeFirstPart = coord[0].length() == 2 ? 2 : 3; //because of F9 F10 +char
            int rangeSecondPart = coord[1].length() == 2 ? 2 : 3; //because of F9 F10 +char

            row = coord[0].substring(0, 1).equals(coord[1].substring(0, 1));
            column = coord[0].substring(1, rangeFirstPart).equals(coord[1].substring(1, rangeSecondPart));

            String orderedInput = "";
            int startCoorNum = Integer.parseInt(startCoord.substring(1, rangeFirstPart));
            int endCoorNum = Integer.parseInt(endCoord.substring(1, rangeSecondPart));

            int startColumnNum = getArrayIndexFromChar(startCoord.charAt(0));
            int endColumnNum = getArrayIndexFromChar(endCoord.charAt(0));

            if (row && (endCoorNum < startCoorNum)) {
                orderedInput = endCoord + " " + startCoord;
            } else if (column && (endColumnNum < startColumnNum)) {
                orderedInput = endCoord + " " + startCoord;
            } else {
                orderedInput = input;
            }
            this.input = orderedInput;
        }

        private int getArrayIndexFromChar(char character) {
            return character - 65;
        }

        public String validateAll() {
            setProperOrderInput();
            inputCheck();
            sizeCheck();
            rowColumnCheck();
            arrangeCheck();
            return validateStr;
        }


        private int lengthOfGivenCoordinate() {
            int sum = 0;

            String[] coord = this.input.split(" ");
            String startCoord = coord[0];
            String endCoord = coord[1];

            int rangeFirstPart = coord[0].length() == 2 ? 2 : 3; //because of F9 F10 +char
            int rangeSecondPart = coord[1].length() == 2 ? 2 : 3; //because of F9 F10 +char

            int startCoorNum = Integer.parseInt(startCoord.substring(1, rangeFirstPart));
            int endCoorNum = Integer.parseInt(endCoord.substring(1, rangeSecondPart));

            int startColumnNum = getArrayIndexFromChar(startCoord.charAt(0));
            int endColumnNum = getArrayIndexFromChar(endCoord.charAt(0));

            if (row) {
                sum = endCoorNum - startCoorNum;
            } else if (column) {
                sum = endColumnNum - startColumnNum;
            }
            return sum + 1;
        }

        private boolean isShipAround() {

            String[] coord = this.input.split(" ");
            String startCoord = coord[0];
            String endCoord = coord[1];

            int startColumnNum = getArrayIndexFromChar(startCoord.charAt(0));
            int endColumnNum = getArrayIndexFromChar(endCoord.charAt(0));

            int rangeFirstPart = coord[0].length() == 2 ? 2 : 3; //because of F9 F10 +char
            int rangeSecondPart = coord[1].length() == 2 ? 2 : 3; //because of F9 F10 +char

            int firstNumber = Integer.parseInt(coord[0].substring(1, rangeFirstPart));
            int secondNumber = Integer.parseInt(coord[1].substring(1, rangeSecondPart));

            int[] start = {startColumnNum, firstNumber - 1};
            int[] newcoord = new int[2];
            ArrayMove arrayMove = new ArrayMove(table.getTable(), start);


            boolean up = false;
            boolean down = false;
            boolean right = false;
            boolean left = false;

            if (row) {

                if (arrayMove.move("UP")) {
                    up = hasZeroInRow(arrayMove.getReturnCoordinate(), battleship.getSize());

                }
                if (arrayMove.move("LEFT")) {
                    left = hasZeroInRow(arrayMove.getReturnCoordinate(), battleship.getSize());
                }

            } else if (column) {
                if (arrayMove.move("UP")) {
                    up = hasZeroInColumn(arrayMove.getReturnCoordinate(), battleship.getSize());

                }
                if (arrayMove.move("LEFT")) {
                    left = hasZeroInColumn(arrayMove.getReturnCoordinate(), battleship.getSize());

                }
                if (arrayMove.move("DOWN") && arrayMove.move("DOWN")) {
                    down = hasZeroInColumn(arrayMove.getReturnCoordinate(), battleship.getSize());

                }

            }
            return up || down || left || right;
        }

        private boolean hasZeroInRow(int[] coord, int battleshipSize) {
            int rowNumber = coord[0] + 1;
            int colNum = coord[1] - 1;
            int start = colNum;
            int end = 9;

            if (start + battleshipSize < 9) {
                end = start + battleshipSize + 1;
            } else if (rowNumber < 9) {
                end = start + battleshipSize;
            }
            if (start < 0) {
                start = 0;
            }

            for (int i = start; i < end; i++) {

                if (table.getTable()[rowNumber][i].equals("O")) {
                    return true;
                }
            }
            return false;
        }

        private boolean hasZeroInColumn(int[] coord, int battleshipSize) {
            int rowNumber = coord[0];
            int colNum = coord[1];
            int start = rowNumber;
            int end = 9;

            if (start + battleshipSize < 9) {
                end = start + battleshipSize + 1;
            } else if (rowNumber < 9) {
                end = start + battleshipSize;
            } else if (rowNumber > 9) {
                end = 9;
            }

            for (int i = start; i < end; i++) {
                if (table.getTable()[i][colNum].equals("O")) {
                    return true;
                }
            }

            return false;
        }

    }
  learner_created: true
- name: src/battleship/ArrayMove.java
  visible: true
  text: |
    package battleship;

    public class ArrayMove {

        int[] returnCoordinate = new int[2];
        String[][] arrayName;
        int[] startCoord;
        boolean isInRange;
        int minColumnNum;
        int maxColumnNum;
        int minRowNum;
        int maxRowNum;

        public ArrayMove(String[][] arrayName, int[] startCoord) {
            this.arrayName = arrayName;
            this.startCoord = startCoord;
            returnCoordinate = startCoord;

            minColumnNum = 0;
            maxColumnNum = arrayName.length;
            minRowNum = 0;
            maxRowNum = arrayName[0].length;

        }

        public boolean move(String direction) {

            if (isMoveToTheNextDirection(direction)) {
                switch (direction) {
                    case "UP":
                        up();
                        break;
                    case "DOWN":
                        down();
                        break;
                    case "RIGHT":
                        right();
                        break;
                    case "LEFT":
                        left();
                        break;
                }
            }

            return isMoveToTheNextDirection(direction);
        }

        boolean isMoveToTheNextDirection(String direction) {

            switch (direction) {
                case "UP":
                    isUp();
                    break;
                case "DOWN":
                    isDown();
                    break;
                case "RIGHT":
                    isRight();
                    break;
                case "LEFT":
                    isLeft();
                    break;

            }
            return isInRange;
        }

        private void isLeft() {
            isInRange = returnCoordinate[1] > minRowNum;

        }

        private void isRight() {

            isInRange = returnCoordinate[1] < maxRowNum;
        }

        private void isDown() {

            isInRange = returnCoordinate[0] < maxColumnNum;
        }

        private void isUp() {
            isInRange = returnCoordinate[0] > minColumnNum;
        }


        private void left() {
            if (isInRange) {
                returnCoordinate[0] = startCoord[0];
                returnCoordinate[1] = startCoord[1] - 1;

            }
        }

        private void right() {
            if (isInRange) {
                returnCoordinate[0] = startCoord[0];
                returnCoordinate[1] = startCoord[1] + 1;

            }
        }

        private void down() {
            if (isInRange) {
                returnCoordinate[0] = startCoord[0] + 1;
                returnCoordinate[1] = startCoord[1];

            }
        }

        private void up() {
            if (isInRange) {
                returnCoordinate[0] = startCoord[0] - 1;
                returnCoordinate[1] = startCoord[1];

            }

        }

        public int[] getReturnCoordinate() {
            return returnCoordinate;
        }

        @Override
        public String toString() {
            return returnCoordinate[0] + "  " + returnCoordinate[1];
        }
    }
  learner_created: true
- name: src/battleship/TableSymbols.java
  visible: true
  text: |
    package battleship;

    public enum TableSymbols {
        UNTOUCHED("~"), // ~
        HIT("X"),       // x
        MISS("M")       // m
        ;

        private final String symbol;

        TableSymbols(String symbol) {
            this.symbol = symbol;
        }

        public String getSymbol() {
            return symbol;
        }

    }
  learner_created: true
- name: src/battleship/Player.java
  visible: true
  text: |
    package battleship;

    public class Player {

        String name;

        public Player(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }
  learner_created: true
- name: src/battleship/Battleship.java
  visible: true
  text: |
    package battleship;

    public class Battleship {

        public String getName() {
            return name;
        }

        private String name;
        private int size; //cells number
        private int coordinates[][];
        private char denote; // 'O' char
        private boolean isDestroyed;

        private byte attackedNum;

        public Battleship(Ships ship, char denote) {
            this.size = ship.getShipSize();
            this.denote = denote;
            this.name = ship.name();
            this.attackedNum = 0;
        }

        public int getSize() {
            return size;
        }

        public int[][] getCoordinates() {
            return coordinates;
        }

        public void setCoordinates(int[][] coordinates) {
            this.coordinates = coordinates;
        }

        public char getDenote() {
            return denote;
        }

        public void setDenote(char denote) {
            this.denote = denote;
        }

        public boolean isDestroyed() {

            return isDestroyed;
        }

        public byte getAttackedNum() {
            return attackedNum;
        }

        public void setAttacked() {
            this.attackedNum++;
            isDestroyed = (this.attackedNum == this.size) ? true : false;
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Failed
feedback:
  message: "Wrong answer in test #1\n\nno offer found to give the move to another\
    \ player\n\nPlease find below the output of your program during this failed test.\n\
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.\n\
    \n---\n\nPlayer 1, place your ships on the game field\n\n   1 2 3 4 5 6 7 8 9\
    \ 10\n A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n B ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\
    \ D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n G ~\
    \ ~ ~ ~ ~ ~ ~ ~ ~ ~\n H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n J ~ ~ ~\
    \ ~ ~ ~ ~ ~ ~ ~\n\nEnter the coordinates of the Aircraft Carrier (5 cells):\n\
    &gt; F3 F7\n\n   1 2 3 4 5 6 7 8 9 10\n A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n B ~ ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~\n C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n E ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~\n F ~ ~ O O O O O ~ ~ ~\n G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\
    \ I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\nEnter the coordinates of the\
    \ Battleship (4 cells):\n&gt; A1 D1\n\n   1 2 3 4 5 6 7 8 9 10\n A O ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~\n B O ~ ~ ~ ~ ~ ~ ~ ~ ~\n C O ~ ~ ~ ~ ~ ~ ~ ~ ~\n D O ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~\n E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n F ~ ~ O O O O O ~ ~ ~\n G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\
    \ H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\nEnter\
    \ the coordinates of the Submarine (3 cells):\n&gt; J7 J10\n\nError! Wrong length\
    \ of the Submarine! Try again:\n\nEnter the coordinates of the Submarine (3 cells):\n\
    &gt; J10 J8\n\n   1 2 3 4 5 6 7 8 9 10\n A O ~ ~ ~ ~ ~ ~ ~ ~ ~\n B O ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~\n C O ~ ~ ~ ~ ~ ~ ~ ~ ~\n D O ~ ~ ~ ~ ~ ~ ~ ~ ~\n E ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~\n F ~ ~ O O O O O ~ ~ ~\n G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\
    \ I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n J ~ ~ ~ ~ ~ ~ ~ O O O\n\nEnter the coordinates of the\
    \ Cruiser (3 cells):\n&gt; B9 D8\n\nError! Wrong ship location! Try again:\n\n\
    Enter the coordinates of the Cruiser (3 cells):\n&gt; B9 D9\n\n   1 2 3 4 5 6\
    \ 7 8 9 10\n A O ~ ~ ~ ~ ~ ~ ~ ~ ~\n B O ~ ~ ~ ~ ~ ~ ~ O ~\n C O ~ ~ ~ ~ ~ ~ ~\
    \ O ~\n D O ~ ~ ~ ~ ~ ~ ~ O ~\n E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n F ~ ~ O O O O O ~ ~ ~\n\
    \ G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n J ~\
    \ ~ ~ ~ ~ ~ ~ O O O\n\nEnter the coordinates of the Destroyer (2 cells):\n&gt;\
    \ E6 D6\n\nError! You placed it too close to another one. Try again:\n\nEnter\
    \ the coordinates of the Destroyer (2 cells):\n&gt; I2 J2\n\n   1 2 3 4 5 6 7\
    \ 8 9 10\n A O ~ ~ ~ ~ ~ ~ ~ ~ ~\n B O ~ ~ ~ ~ ~ ~ ~ O ~\n C O ~ ~ ~ ~ ~ ~ ~ O\
    \ ~\n D O ~ ~ ~ ~ ~ ~ ~ O ~\n E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n F ~ ~ O O O O O ~ ~ ~\n\
    \ G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n I ~ O ~ ~ ~ ~ ~ ~ ~ ~\n J ~\
    \ O ~ ~ ~ ~ ~ O O O\n\nPress Enter and pass the move to another player\n...\n\
    &gt; \nPlayer 2, place your ships on the game field\n\n   1 2 3 4 5 6 7 8 9 10\n\
    \ A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n B ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n D ~\
    \ ~ ~ ~ ~ ~ ~ ~ ~ ~\n E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n G ~ ~ ~\
    \ ~ ~ ~ ~ ~ ~ ~\n H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n J ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~ ~\n\nEnter the coordinates of the Aircraft Carrier (5 cells):\n&gt;\
    \ H2 H6\n\n   1 2 3 4 5 6 7 8 9 10\n A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n B ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~\n C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\
    \ F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n H ~ O O O O O ~ ~ ~ ~\n I ~\
    \ ~ ~ ~ ~ ~ ~ ~ ~ ~\n J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\nEnter the coordinates of the Battleship\
    \ (4 cells):\n&gt; F3 F6\n\n   1 2 3 4 5 6 7 8 9 10\n A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\
    \ B ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n E ~\
    \ ~ ~ ~ ~ ~ ~ ~ ~ ~\n F ~ ~ O O O O ~ ~ ~ ~\n G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n H ~ O O\
    \ O O O ~ ~ ~ ~\n I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\nEnter the coordinates\
    \ of the Submarine (3 cells):\n&gt; H8 F8\n\n   1 2 3 4 5 6 7 8 9 10\n A ~ ~ ~\
    \ ~ ~ ~ ~ ~ ~ ~\n B ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n D ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~ ~\n E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n F ~ ~ O O O O ~ O ~ ~\n G ~ ~ ~ ~ ~ ~ ~\
    \ O ~ ~\n H ~ O O O O O ~ O ~ ~\n I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n J ~ ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~\n\nEnter the coordinates of the Cruiser (3 cells):\n&gt; D4 D6\n\n   1 2 3\
    \ 4 5 6 7 8 9 10\n A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n B ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n C ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~ ~\n D ~ ~ ~ O O O ~ ~ ~ ~\n E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n F ~ ~ O O O O ~\
    \ O ~ ~\n G ~ ~ ~ ~ ~ ~ ~ O ~ ~\n H ~ O O O O O ~ O ~ ~\n I ~ ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~\n J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\nEnter the coordinates of the Destroyer (2 cells):\n\
    &gt; D8 C8\n\n   1 2 3 4 5 6 7 8 9 10\n A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n B ~ ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~\n C ~ ~ ~ ~ ~ ~ ~ O ~ ~\n D ~ ~ ~ O O O ~ O ~ ~\n E ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~\n F ~ ~ O O O O ~ O ~ ~\n G ~ ~ ~ ~ ~ ~ ~ O ~ ~\n H ~ O O O O O ~ O ~ ~\n\
    \ I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\n   1 2 3 4 5 6 7 8 9 10\n A\
    \ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n B ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n D ~ ~\
    \ ~ ~ ~ ~ ~ ~ ~ ~\n E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n G ~ ~ ~ ~\
    \ ~ ~ ~ ~ ~ ~\n H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n J ~ ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~\n----------------------\n   1 2 3 4 5 6 7 8 9 10\n A O ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~\n B O ~ ~ ~ ~ ~ ~ ~ O ~\n C O ~ ~ ~ ~ ~ ~ ~ O ~\n D O ~ ~ ~ ~ ~ ~ ~ O ~\n\
    \ E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n F ~ ~ O O O O O ~ ~ ~\n G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n H ~\
    \ ~ ~ ~ ~ ~ ~ ~ ~ ~\n I ~ O ~ ~ ~ ~ ~ ~ ~ ~\n J ~ O ~ ~ ~ ~ ~ O O O"
  time: Wed, 21 Sep 2022 14:36:59 UTC
record: -1
